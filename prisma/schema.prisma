datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model BotGlobalSettings {
    id                      String   @id @map("client_id")
    userBlocklist           String[] @map("user_blocklist")
    guildBlocklist          String[] @map("guild_blocklist")
    botOwners               String[] @map("bot_owners")
    controlGuildID          String?  @map("control_guild_id")
    globalLogChannelPublic  String?  @map("global_log_channel_public")
    globalLogChannelPrivate String?  @map("global_log_channel_private")

    restarts DateTime[] @map("bot_restarts")

    @@map("botGlobalSettings")
}

model User {
    id       String        @id @map("user_id")
    settings UserSettings?
    members  Member[]

    @@map("users")
}

model Guild {
    id         String         @id @map("guild_id")
    settings   GuildSettings?
    members    Member[]
    modActions ModAction[]

    @@map("guilds")
}

model Member {
    id      Int    @id @default(autoincrement())
    userID  String @map("user_id")
    user    User   @relation(fields: [userID], references: [id], onUpdate: Cascade)
    guildID String @map("guild_id")
    guild   Guild  @relation(fields: [guildID], references: [id], onUpdate: Cascade)

    joinTimes  DateTime[] @map("join_times")
    leaveTimes DateTime[] @map("leave_times")

    usernameHistory    String[] @map("username_history") /// @encrypted?mode=strict
    displayNameHistory String[] @map("display_name_history") /// @encrypted?mode=strict

    xpData MemberDataXP?

    @@unique([userID, guildID])
    @@map("members")
}

enum MeasurementSystem {
    IMPERIAL
    METRIC
}

enum LanguageTag {
    bg_BG
    cs_CZ
    da_DK
    de_DE
    el_GR
    en_GB
    en_US
    fi_FI
    fr_FR
    hi_IN
    hr_HR
    hu_HU
    it_IT
    ja_JP
    ko_KR
    lt_LT
    nb_NO
    nl_NL
    pl_PL
    pt_BR
    ro_RO
    ru_RU
    sv_SE
    th_TH
    tr_TR
    uk_UA
    vi_VN
    zh_CN
}

model UserSettings {
    id                   String             @id @map("user_id")
    user                 User               @relation(fields: [id], references: [id], onUpdate: Cascade)
    chatLanguage         LanguageTag?       @map("language")
    chatMeasurementUnits MeasurementSystem? @map("measurement_units")
    // Data Opt-Out
    disableBot           Boolean            @default(false) @map("bot_disabled")

    @@map("userSettings")
}

model GuildSettings {
    // Info
    id    String @id @map("guild_id")
    guild Guild  @relation(fields: [id], references: [id], onUpdate: Cascade)

    // ~~~~~     General Server Settings     ~~~~~ //
    chatLanguage         LanguageTag       @default(en_US) @map("language")
    chatMeasurementUnits MeasurementSystem @default(IMPERIAL) @map("measurement_units")

    // ~~~~~     Analytics Settings     ~~~~~ //
    shareGuildInfoDetailed         Boolean @default(true) @map("analytics_guild_info_detailed")
    shareGuildCommandUsage         Boolean @default(true) @map("analytics_guild_command_use")
    shareGuildCommandUsageDetailed Boolean @default(true) @map("analytics_guild_command_use_detailed")
    // Moderation Info Sharing
    shareGuildBans                 Boolean @default(false) @map("analytics_guild_bans")
    shareGuildBansDetailed         Boolean @default(false) @map("analytics_guild_bans_detailed")
    shareGuildModeration           Boolean @default(false) @map("analytics_guild_moderation")
    shareGuildModerationDetailed   Boolean @default(false) @map("analytics_guild_moderation_detailed")

    // ~~~~~     Greeting Settings     ~~~~~ //
    greetingWelcomeEnabled       Boolean @default(false) @map("greeting_welcome_users")
    greetingWelcomeRejoins       Boolean @default(true) @map("greeting_welcome_rejoins")
    greetingWelcomeChannel       String? @map("greeting_welcome_channel")
    greetingWelcomeMessage       String? @map("greeting_welcome_message")
    greetingWelcomeMessageRejoin String? @map("greeting_welcome_message_rejoin")
    greetingGoodbyeEnabled       Boolean @default(false) @map("greeting_dismiss_users")
    greetingGoodbyeRejoins       Boolean @default(true) @map("greeting_dismiss_rejoins")
    greetingGoodbyeChannel       String? @map("greeting_dismiss_channel")
    greetingGoodbyeMessage       String? @map("greeting_dismiss_message")
    greetingGoodbyeMessageRejoin String? @map("greeting_dismiss_message_rejoin")

    // ~~~~~     Quick Permissions Settings     ~~~~~ //
    adminRoles     String[] @map("permissions_roles_admin")
    botConfigRoles String[] @map("permissions_roles_bot_config")
    moderatorRoles String[] @map("permissions_roles_moderator")

    // Per-Command Settings
    commands   GuildSettingsCommand[]
    chatFilter GuildSettingsChatFilter?
    infoLogs   GuildSettingsInfoLogs?
    modActions GuildSettingsModActions?
    xp         GuildSettingsXP?

    @@map("guildSettings")
}

model GuildSettingsCommand {
    id                      Int           @id @default(autoincrement())
    guildID                 String        @map("guild_id")
    guildSettings           GuildSettings @relation(fields: [guildID], references: [id], onUpdate: Cascade)
    name                    String        @map("command_name")
    enabled                 Boolean       @map("command_enabled")
    slashCommand            Boolean       @map("slash_command_enabled")
    contextCommand          Boolean       @map("context_command_enabled")
    channelAllowlistEnabled Boolean       @map("channel_allowlist_enabled")
    channelAllowlist        String[]      @map("channel_allowlist")
    channelBlocklistEnabled Boolean       @map("channel_blocklist_enabled")
    channelBlocklist        String[]      @map("channel_blocklist")
    memberAllowlistEnabled  Boolean       @map("member_allowlist_enabled")
    memberAllowlist         String[]      @map("member_allowlist")
    memberBlocklistEnabled  Boolean       @map("member_blocklist_enabled")
    memberBlocklist         String[]      @map("member_blocklist")
    roleAllowlistEnabled    Boolean       @map("role_allowlist_enabled")
    roleAllowlist           String[]      @map("role_allowlist")
    roleBlocklistEnabled    Boolean       @map("role_blocklist_enabled")
    roleBlocklist           String[]      @map("role_blocklist")
    other                   Json?         @map("other")

    @@map("guildCommandSettings")
}

// Message filters
model GuildSettingsChatFilter {
    id            String        @id @map("guild_id")
    guildSettings GuildSettings @relation(fields: [id], references: [id], onUpdate: Cascade)

    antiInvite           Boolean @default(false) @map("filters_anti_invite")
    antiInvitePunishment String? @map("filters_anti_invite_punishment")

    modBypass            Boolean  @default(true) @map("filters_mod_bypass")
    deleteOffending      Boolean  @default(true) @map("filters_delete_offending")
    checkDisplayNames    Boolean  @default(true) @map("filters_check_display_names")
    wordBlocklist        String[] @map("filters_word_blocklist")
    inviteAllowlist      String[] @map("filters_invite_allowlist")
    mentionSpamThreshold Int      @default(12) @map("filters_mention_spam_threshold")

    @@map("guildChatFilterSettings")
}

enum UpdateLogStyle {
    after_only
    before_after
    before_only
    diff
}

model GuildSettingsInfoLogs {
    id            String        @id @map("guild_id")
    guildSettings GuildSettings @relation(fields: [id], references: [id], onUpdate: Cascade)

    // Log Channels
    infoLogChannel String? @map("log_channel_info")

    // Channel Changes
    channelCreateLog      Boolean        @default(false) @map("log_channel_create")
    channelDeleteLog      Boolean        @default(false) @map("log_channel_delete")
    channelUpdateLog      Boolean        @default(false) @map("log_channel_update")
    channelUpdateLogStyle UpdateLogStyle @default(before_after) @map("log_channel_update_style")

    // Emoji Changes
    emojiCreateLog      Boolean        @default(false) @map("log_emoji_create")
    emojiDeleteLog      Boolean        @default(false) @map("log_emoji_delete")
    emojiUpdateLog      Boolean        @default(false) @map("log_emoji_update")
    emojiUpdateLogStyle UpdateLogStyle @default(before_after) @map("log_emoji_update_style")

    // New Bots
    guildBotAddLog Boolean @default(false) @map("log_guild_bot_add")

    // Member Changes
    guildMemberAddLog         Boolean        @default(true) @map("log_guild_member_join")
    guildMemberRemoveLog      Boolean        @default(true) @map("log_guild_member_leave")
    guildMemberUpdateLog      Boolean        @default(false) @map("log_guild_member_update")
    guildMemberUpdateLogStyle UpdateLogStyle @default(before_after) @map("log_guild_member_update_style")

    // Guild Changes
    guildUpdateLog Boolean @default(false) @map("log_guild_update")

    // Scheduled Event Changes
    guildScheduledEventCreateLog      Boolean        @default(false) @map("log_guild_scheduled_event_create")
    guildScheduledEventDeleteLog      Boolean        @default(false) @map("log_guild_scheduled_event_delete")
    guildScheduledEventUpdateLog      Boolean        @default(false) @map("log_guild_scheduled_event_update")
    guildScheduledEventUpdateLogStyle UpdateLogStyle @default(before_after) @map("log_guild_scheduled_event_update_style")

    // Invite Changes
    inviteCreateLog Boolean @default(false) @map("log_invite_create")
    inviteDeleteLog Boolean @default(false) @map("log_invite_delete")

    // Message Changes
    messageAttachmentDeleteLog Boolean        @default(false) @map("log_message_attachment_delete")
    messageDeleteLog           Boolean        @default(false) @map("log_message_delete")
    messageUpdateLog           Boolean        @default(false) @map("log_message_update")
    messageUpdateLogStyle      UpdateLogStyle @default(before_after) @map("log_message_update_style")

    // Role Changes
    roleCreateLog      Boolean        @default(false) @map("log_role_create")
    roleDeleteLog      Boolean        @default(false) @map("log_role_delete")
    roleUpdateLog      Boolean        @default(false) @map("log_role_update")
    roleUpdateLogStyle UpdateLogStyle @default(before_after) @map("log_role_update_style")

    // Stage Instance Changes
    stageInstanceCreateLog      Boolean        @default(false) @map("log_stage_instance_create")
    stageInstanceDeleteLog      Boolean        @default(false) @map("log_stage_instance_delete")
    stageInstanceUpdateLog      Boolean        @default(false) @map("log_stage_instance_update")
    stageInstanceUpdateLogStyle UpdateLogStyle @default(before_after) @map("log_stage_instance_update_style")

    // Sticker Changes
    stickerCreateLog      Boolean        @default(false) @map("log_sticker_create")
    stickerDeleteLog      Boolean        @default(false) @map("log_sticker_delete")
    stickerUpdateLog      Boolean        @default(false) @map("log_sticker_update")
    stickerUpdateLogStyle UpdateLogStyle @default(before_after) @map("log_sticker_update_style")

    // Thread Changes
    threadCreateLog      Boolean        @default(false) @map("log_thread_create")
    threadDeleteLog      Boolean        @default(false) @map("log_thread_delete")
    threadUpdateLog      Boolean        @default(false) @map("log_thread_update")
    threadUpdateLogStyle UpdateLogStyle @default(before_after) @map("log_thread_update_style")

    // Webhook Changes
    webhookCreateLog      Boolean        @default(false) @map("log_webhook_create")
    webhookDeleteLog      Boolean        @default(false) @map("log_webhook_delete")
    webhookUpdateLog      Boolean        @default(false) @map("log_webhook_update")
    webhookUpdateLogStyle UpdateLogStyle @default(before_after) @map("log_webhook_update_style")

    @@map("guildSettingsInfoLogs")
}

model GuildSettingsModActions {
    id            String        @id @map("guild_id")
    guildSettings GuildSettings @relation(fields: [id], references: [id], onUpdate: Cascade)

    // Log Channels
    modLogChannel       String? @map("log_channel_moderation")
    modLogChannelPublic String? @map("log_channel_moderation_public")

    // Ban Settings
    banNotifyUser           Boolean @default(true) @map("ban_notify_user")
    banLog                  Boolean @default(true) @map("ban_log")
    banLogPublic            Boolean @default(false) @map("ban_log_public")
    banAllowAppeal          Boolean @default(true) @map("ban_allow_appeal")
    banPurgeMessages        Boolean @default(true) @map("ban_purge_enabled")
    banPurgeMessagesSeconds Int     @default(86400) @map("ban_purge_seconds")

    // UnBan Settings
    unbanNotifyUser Boolean @default(true) @map("unban_notify_user")
    unbanLog        Boolean @default(true) @map("unban_log")
    unbanLogPublic  Boolean @default(false) @map("unban_log_public")

    // Kick Settings
    kickNotifyUser           Boolean @default(true) @map("kick_notify_user")
    kickLog                  Boolean @default(true) @map("kick_log")
    kickLogPublic            Boolean @default(false) @map("kick_log_public")
    kickPurgeMessages        Boolean @default(true) @map("kick_purge_enabled")
    kickPurgeMessagesSeconds Int     @default(86400) @map("kick_purge_seconds")

    // Mute/Timeout Settings
    muteNotifyUser           Boolean @default(true) @map("mute_notify_user")
    muteLog                  Boolean @default(true) @map("mute_log")
    muteLogPublic            Boolean @default(false) @map("mute_log_public")
    muteAllowAppeal          Boolean @default(true) @map("mute_allow_appeal")
    mutePurgeMessages        Boolean @default(true) @map("mute_purge_enabled")
    mutePurgeMessagesSeconds Int     @default(86400) @map("mute_purge_seconds")

    // UnMute/UnTimeout Settings
    unmuteNotifyUser Boolean @default(true) @map("unmute_notify_user")
    unmuteLog        Boolean @default(true) @map("unmute_log")
    unmuteLogPublic  Boolean @default(false) @map("unmute_log_public")

    // Purge/Prune Settings
    purgeNotifyUser Boolean @default(true) @map("purge_notify_user")
    purgeLog        Boolean @default(true) @map("purge_log")
    purgeLogPublic  Boolean @default(false) @map("purge_log_public")

    // VC Ban Settings
    vcBanNotifyUser  Boolean @default(true) @map("vcban_notify_user")
    vcBanLog         Boolean @default(true) @map("vcban_log")
    vcBanLogPublic   Boolean @default(false) @map("vcban_log_public")
    vcBanAllowAppeal Boolean @default(true) @map("vcban_allow_appeal")

    // VC UnBan Settings
    vcUnbanNotifyUser Boolean @default(true) @map("vcunban_notify_user")
    vcUnbanLog        Boolean @default(true) @map("vcunban_log")
    vcUnbanLogPublic  Boolean @default(false) @map("vcunban_log_public")

    // VC Kick Settings
    vcKickNotifyUser Boolean @default(true) @map("vckick_notify_user")
    vcKickLog        Boolean @default(true) @map("vckick_log")
    vcKickLogPublic  Boolean @default(false) @map("vckick_log_public")

    // Anti-Invite Filter Settings
    antiInviteNotifyUser   Boolean @default(true) @map("anti_invite_notify_user")
    antiInviteLog          Boolean @default(true) @map("anti_invite_log")
    antiInviteLogPublic    Boolean @default(false) @map("anti_invite_log_public")
    antiInviteDelete       Boolean @default(true) @map("anti_invite_delete")
    antiInviteBan          Boolean @default(false) @map("anti_invite_ban_user")
    antiInviteKick         Boolean @default(false) @map("anti_invite_kick_user")
    antiInviteMute         Boolean @default(false) @map("anti_invite_mute_user")
    antiInviteMuteDuration Int?    @map("anti_invite_mute_user_duration")

    // Mention Spam Filter Settings
    mentionSpamNotifyUser   Boolean @default(true) @map("mention_spam_notify_user")
    mentionSpamLog          Boolean @default(true) @map("mention_spam_log")
    mentionSpamLogPublic    Boolean @default(false) @map("mention_spam_log_public")
    mentionSpamDelete       Boolean @default(true) @map("mention_spam_delete")
    mentionSpamBan          Boolean @default(false) @map("mention_spam_ban_user")
    mentionSpamKick         Boolean @default(false) @map("mention_spam_kick_user")
    mentionSpamMute         Boolean @default(false) @map("mention_spam_mute_user")
    mentionSpamMuteDuration Int?    @map("mention_spam_mute_user_duration")

    // Chat Filter Settings
    filteredWordNotifyUser   Boolean @default(true) @map("filtered_word_notify_user")
    filteredWordLog          Boolean @default(true) @map("filtered_word_log")
    filteredWordLogPublic    Boolean @default(false) @map("filtered_word_log_public")
    filteredWordDelete       Boolean @default(true) @map("filtered_word_delete")
    filteredWordBan          Boolean @default(false) @map("filtered_word_ban_user")
    filteredWordKick         Boolean @default(false) @map("filtered_word_kick_user")
    filteredWordMute         Boolean @default(false) @map("filtered_word_mute_user")
    filteredWordMuteDuration Int?    @map("filtered_word_mute_user_duration")

    // Username/Nickname Filter Settings
    filteredNameNotifyUser       Boolean  @default(true) @map("filtered_name_notify_user")
    filteredNameLog              Boolean  @default(true) @map("filtered_name_log")
    filteredNameLogPublic        Boolean  @default(false) @map("filtered_name_log_public")
    filteredNameOverwrite        Boolean  @default(true) @map("filtered_name_overwrite")
    filteredNameOverwriteOptions String[] @default(["Redacted"]) @map("filtered_name_overwrite_options")
    filteredNameBan              Boolean  @default(false) @map("filtered_name_ban_user")
    filteredNameKick             Boolean  @default(false) @map("filtered_name_kick_user")
    filteredNameMute             Boolean  @default(false) @map("filtered_name_mute_user")
    filteredNameMuteDuration     Int?     @map("filtered_name_mute_user_duration")

    // Warning Settings
    warnNotifyUser Boolean @default(true) @map("warn_notify_user")
    warnLog        Boolean @default(true) @map("warn_log")
    warnLogPublic  Boolean @default(false) @map("warn_log_public")

    @@map("guildModActionSettings")
}

enum ModActionType {
    BAN
    UNBAN
    KICK
    MUTE
    UNMUTE
    PURGE
    VCBAN
    VCUNBAN
    VCKICK
    FILTER_ANTI_INVITE
    FILTER_MENTION_SPAM
    FILTER_CHAT
    FILTER_USERNAME
}

model ModAction {
    id          Int           @id @default(autoincrement())
    guildID     String        @map("guild_id")
    guild       Guild         @relation(fields: [guildID], references: [id], onUpdate: Cascade)
    type        ModActionType @map("action_type")
    target      String        @map("target_id")
    moderator   String        @map("moderator_id")
    timestamp   DateTime      @map("timestamp")
    description String?       @map("description") /// @encrypted?mode=strict
    duration    Int?          @map("duration_minutes")
    silent      Boolean?      @default(false) @map("silent")

    @@map("modActions")
}

// XP Settings
model GuildSettingsXP {
    id                 String        @id @map("guild_id")
    guildSettings      GuildSettings @relation(fields: [id], references: [id], onUpdate: Cascade)
    enabled            Boolean       @default(true) @map("xp_enabled")
    purgeOnMemberLeave Boolean       @default(false) @map("xp_delete_on_member_leave")
    hideOnMemberLeave  Boolean       @default(true) @map("xp_hide_on_member_leave")

    channelAllowlistEnabled Boolean  @default(false) @map("channel_allowlist_enabled")
    channelAllowlist        String[] @map("channel_allowlist")
    channelBlocklistEnabled Boolean  @default(false) @map("channel_blocklist_enabled")
    channelBlocklist        String[] @map("channel_blocklist")
    // Per-channel multipliers?
    roleAllowlistEnabled    Boolean  @default(false) @map("role_allowlist_enabled")
    roleAllowlist           String[] @map("role_allowlist")
    roleBlocklistEnabled    Boolean  @default(false) @map("role_blocklist_enabled")
    roleBlocklist           String[] @map("role_blocklist")
    // Per-role multipliers?
    memberAllowlistEnabled  Boolean  @default(false) @map("member_allowlist_enabled")
    memberAllowlist         String[] @map("member_allowlist")
    memberBlocklistEnabled  Boolean  @default(false) @map("member_blocklist_enabled")
    memberBlocklist         String[] @map("member_blocklist")

    // Level Up Notificaiton Settings
    levelUpNotifiy        Boolean @default(false) @map("level_up_notify_enabled")
    levelUpNotifiyMessage String? @map("level_up_notify_message")
    levelUpNotifyReply    Boolean @default(false) @map("level_up_notify_reply")
    levelUpNotifyDM       Boolean @default(false) @map("level_up_notify_dm")
    levelUpNotifyChannel  String? @map("level_up_notify_channel")

    // mee6 import tracking
    mee6ImportedTime   DateTime? @map("xp_imported_mee6_time")
    mee6ImportTimeNext DateTime? @map("xp_import_mee6_next")

    @@map("guildSettingsXP")
}

model MemberDataXP {
    id         Int       @id @default(autoincrement())
    member     Member    @relation(fields: [id], references: [id], onUpdate: Cascade)
    userID     String    @map("user_id")
    guildID    String    @map("guild_id")
    currentXP  BigInt    @default(0) @map("xp_current")
    multiplier Int       @default(1) @map("xp_multiplier")
    lastEarned DateTime? @map("xp_last_earned")

    mee6ImportedXP   BigInt    @default(0) @map("xp_imported_mee6")
    mee6ImportedTime DateTime? @map("xp_imported_mee6_time")

    @@unique([userID, guildID])
    @@map("memberDataXP")
}

// TODO: Starboard, pinboard, custom commands, autoresponder. Twitch?
